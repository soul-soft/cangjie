package soulsoft_web_authorization

import soulsoft_web_http.*
import soulsoft_web_routing.RoutingApplicationBuilderExtensions
import soulsoft_web_routing.*
import soulsoft_web_hosting.*
import stdx.encoding.base64.*
import soulsoft_security_claims.*
import soulsoft_web_authentication.*
import soulsoft_extensions_logging.*
import soulsoft_extensions_options.*
import soulsoft_extensions_injection.*

main(args: Array<String>) {
    let builder = WebHost.createBuilder(args)
    builder.services.addRouting()
    //添加身份认证
    builder.services.addAuthentication(BasicAuthenticationDefault.scheme)
        .addScheme<BasicAuthenticationOptions, BasicAuthenticationHandler>(BasicAuthenticationDefault.scheme)

    builder.services.addAuthorization{ configure => 
        configure.addPolicy("default") { p=>
            p.requireClaim("username")
            p.requireAuthenticatedUser()
        }
    }
    let host = builder.build()

    host.useRouting()

    host.useAuthentication()
   
    host.useAuthorization()
   
    host.useEndpoints{ endpoints =>
        endpoints.mapGet("hello") { context =>
            context.response.write("hello")
        }.requireAuthorization("default")
    }
    host.run()
    return 0
}




public class BasicAuthenticationOptions <: AuthenticationSchemeOptions {
}

public class BasicAuthenticationHandler <: AuthenticationHandler<BasicAuthenticationOptions> {
    public init(options: IOptions<BasicAuthenticationOptions>, logger: ILoggerFactory) {
        super(options, logger)
    }

    public func handleAuthenticate() {
        if (let Some(authorization) <- this.context.request.headers.getFirst("Authorization")
            .flatMap{f => fromBase64String(f.replace("Basic ", "")).flatMap{f=> String.fromUtf8(f)} }) {
           
            let secrets = authorization.split(":")
            if (secrets.size == 2) {
                let username = secrets[0]
                let password = secrets[1]
                this.logger.info("username:${username},password:${password}")    
                let subject = ClaimsPrincipal()
                let identity = ClaimsIdentity(this.scheme.name)
                identity.addClaim(Claim("username",username))
                identity.addClaim(Claim("password",password))
                subject.addIdentity(identity)
                let ticket = AuthenticationTicket(subject, this.scheme.name)
                return AuthenticateResult.success(ticket)
            }
        }
        return AuthenticateResult.noResult()
    }
}

public class BasicAuthenticationDefault {
    public static let scheme = "basic"
}