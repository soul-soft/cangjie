package soulsoft_identity_tokens

import std.io.*
import std.fs.*
import std.convert.*
import std.collection.*
import stdx.crypto.keys.*
import stdx.encoding.base64.*

main() {
    // let pem = ECDSAPublicKey.decodeFromPem(String.fromUtf8(readToEnd(File("ec256-public.pem", OpenMode.Read))))
    // let key = ECDsaSecurityKey(publicKey: pem)
    // if (let Some(parameters) <- key.exportParameters()) {
    //     String.join(parameters.q.x |> map{f=>f.format("02X")}|> collectArray, delimiter: " ") |> println
    //     String.join(parameters.q.y |> map{f=>f.format("02X")}|> collectArray, delimiter: " ") |> println
    // }

    let pem = RSAPublicKey.decodeFromPem(String.fromUtf8(readToEnd(File("rsa256_public.pem", OpenMode.Read))))
    let key = RsaSecurityKey(publicKey: pem)
    //key.exportParameters(false)
    Asn1.parse(pem.encodeToDer().body) |> println
    // if (let Some(f) <- Asn1.parse(pem.encodeToDer().body).findFirst(0x03)) {
    //     String.join(f |> map{f => f.format("02X")}|> collectArray, delimiter: " ") |> println
    // }
    return 0
}
