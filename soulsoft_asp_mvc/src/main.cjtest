package soulsoft_asp_mvc

import std.reflect.*
import std.collection.*
import soulsoft_asp_http.*
import soulsoft_asp_routing.*
import soulsoft_asp_hosting.*
import stdx.serialization.serialization.*

main() {
    let builder = WebHost.createBuilder()
    builder.services.addControllers().addApplicationPart("default", [TypeInfo.of<StudentController>()])
    let host = builder.build()
    host.useRouting()
    host.useEndpoints( { endpoints =>
        endpoints.mapGet("openapi") {
            context =>
            let sb = StringBuilder()
            let dataSource = context.services.getOrThrow<EndpointDataSource>()
            for (endpoint in dataSource.endpoints |> filterMap {f => f as RouteEndpoint}) {
                for (pattern in endpoint.metadata |> filterMap{f => f as HttpMethodMetadata}) {
                    let methods = String.join(pattern.httpMethods |> collectArray, delimiter: ',')
                    sb.append("[${methods}]")
                }
                sb.append("${endpoint.routePattern}")
                sb.append("<br/>")
            }
            context.response.write(sb.toString())
            context.response.addHeader("content-type", "text/html")
        }
        endpoints.mapControllers()
    })
    host.run()
    return 0
}

@Route["[controller]"]
public class StudentController <: Controller {
    public StudentController(let env: IWebHostEnvironment) {
    }

    @HttpPost
    public func post(@FromServices env: IWebHostEnvironment, model: StudentModel) {
        //response.write("hello:a1")
        println(env.environmentName)
        return json(model)
    }

    @HttpGet
    public func get() {
        println(context.request.url)
        response.write("hello:a2")
        println(env.environmentName)
    }
}

public class StudentModel <: Serializable<StudentModel> {
    public var id = 0
    public var name = String.empty

    public static func deserialize(dm: DataModel): StudentModel {
        let model = StudentModel()
        if (let dms: DataModelStruct <- dm) {
            if (let id: DataModelInt <- dms.get('id')) {
                model.id = id.getValue()
            }
            if (let name: DataModelString <- dms.get('name')) {
                model.name = name.getValue()
            }
        }
        return model
    }

    public func serialize(): DataModel {
        let dms = DataModelStruct()
        dms.add(Field("id", DataModelInt(id)))
        dms.add(Field("name", DataModelString(name)))
        return dms
    }
}
